openapi: 3.0.0
x-runtime:
  httpserver:
    address: ":8080"
  logger:
    level: "INFO"
    output: "STDOUT"
  stats:
    output: "DATADOG"
    datadog:
      address: "statsd:8126"
      flushinterval: "10s"
  signals:
    installed:
      - "OS"
    os:
      signals:
        - 2 # SIGINT
        - 15 # SIGTERM
  connstate:
    reportinterval: "5s"
    hijackedcounter: "http.server.connstate.hijacked"
    closedcounter: "http.server.connstate.closed"
    idlegauge: "http.server.connstate.idle.gauge"
    idlecounter: "http.server.connstate.idle"
    activegauge: "http.server.connstate.active.gauge"
    activecounter: "http.server.connstate.active"
    newgauge: "http.server.connstate.new.gauge"
    newcounter: "http.server.connstate.new"
x-transportd:
  backends:
    - app
  app:
    host: "http://app:8081"
    pool:
      ttl: "24h"
      count: 1
info:
  version: 1.0.0
  title: "nexpose-vuln-notifier"
  description: "A service that gets the latest Nexpose scan results and publishes the found vulnerabilities to an event stream"
  contact:
    name: Security Development
    email: secdev-external@atlassian.com
  license:
    name: Apache 2.0
    url: 'https://www.apache.org/licenses/LICENSE-2.0.html'
paths:
  /healthcheck:
    get:
      description: "Liveness check."
      responses:
        "200":
          description: "Success."
        "400":
          description: "Invalid input"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-transportd:
        backend: app
  /notification:
      post:
        description: Get scanned assets and vulnerabilities from last scan for given site and publish them onto an event stream.
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScanNotification'
        responses:
          "202":
            description: "Accepted"
        x-transportd:
          backend: app
          enabled:
            - "metrics"
            - "accesslog"
            - "requestvalidation"
            - "lambda"
          lambda:
            arn: "notification"
            async: true
            request: '#! json .Request.Body !#'
            success: '{"status": 202, "bodyPassthrough": true}'
components:
  schemas:
    ScanNotification:
      type: object
      required:
        - site_id
      properties:
        scan_id:
          type: string
          description: The Nexpose scan ID for the completed scan.
        site_id:
          type: string
          description: The Nexpose site ID for the site that just got scanned.
    Error:
      type: object
      properties:
        errorMessage:
          type: string
        errorType:
          type: string
        stackTrace:
          type: array
          items:
            type: string